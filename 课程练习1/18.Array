/*数组的创建和基本操作（增删改查）*/
/*创建数组的方式 */
var arr1 = [1,2,3,"4"];
var arr2 = new Array(5);//(5) [empty × 5]   有五个元素，每个元素都是undefined（undefined和empty一样，不必深入研究）

var arr3 = new Array("5");
console.log(arr3);//["5"]

var arr4 = new Array(5);
for(var i=0;i<arr4.length;i++){arr4[i] = i;}
console.log(arr4);//(5) [0, 1, 2, 3, 4]
??
var arr22 = [];
for(var i=0;i<5;i++){
	document.onclick = function(){  //onclick和for循环是异步执行，for先执行完，此时i为5，然后点击左键，执行onclick，此时i为5
		arr22[i] = i;  //就是为i为5的元素赋值5
	}
}
//数组直接量中的值不一定要是常量，可以是任意的表达式
var base = 1024;
var table = [base,base+1,base+2,base+3];;
console.log(table);//(4) [1024, 1025, 1026, 1027]
//也可包含对象直接量或其他数组直接量
var b = [[1,{y:2}],[2,{x:3}]];
console.log(b);//(2) [Array(2), Array(2)]

var a1 = [1,2,3];
var a2 = a1; //a2和a1指向同一个堆区，数组是对象，对象赋值是引用赋值，a2改变，a1也改变
a2.length = 0;
console.log(a1,a2); //[] []

var a3 = [1,2,3];
var a4 = a3;,
a4 = [];//空的数组，数组也是对象，在栈区新开辟的空间，指向一个新的堆区空间,a3的值还指向原来的堆区，不受影响
console.log(a3,a4);//(3) [1, 2, 3]  []
/*数组元素的增删改查的基本操作 */
var a = [1,2,3];
delete a[2];
console.log(a);//[1, 2, empty]  删除的不彻底，只是将值设置为empty

var arr=[1,2,3];
var p=arr.pop();
console.log(p);//3  pop()返回被删除的元素
console.log(arr);//(2) [1, 2]

var a = ["hello"];
a[1] = 3.14;//增
a[2] = "world";
console.log("删除a[2]前的数组a",a);//(3) ["hello", 3.14, "world"]
delete a[2];
console.log("删除a[2]后的数组a",a);//(3) ["hello", 3.14, empty]
a[0] = "XX";//改
console.log(a[0]);//xx
console.log(a);//["XX", 3.14, empty]

var i=2,b=[];
b[i]=3;
b[i+1]="YY";
b[b[i]] = b[0]; //b[3]=b[0]
console.log(b);//(4) [empty × 2, 3, undefined]  前两个是空 第三个3  最后一个未定义
/* 数组特别之处在于，当使用使用2的32次方以内的非负整数作为属性名时（包括类型转换的数
字），数组作为数组的元素(下标），而不是数组对象的属性*/
var arr=[];
arr[-1.23]='xx';//-1.23不在2的32次方以内的非负整数范围内，此时-1.23作为数组对象的属性看待
arr.hasOwnProperty('-1.23');//true
/*arr[20]='yy';//第20个元素赋值为yy*/
arr['5']='y'; //(6) [empty × 5, "y", -1.23: "xx"]先进行隐式类型转换，将'5'转换成5，前五个元素为空，第6个y，还有-1.23属性 xx

var a = [];
a[-1.23] = true; //创建一个名为“-1,23”的属性
a["100"] = 0;   // 数组的第101个元素
a[1.00] = "Hi"; //和a[1]相当
a[2.2]='a';//2.2不是整数，所以也当做属性来看待
console.log(a.length);//101
console.log(a);//(101) [empty, "Hi", empty × 98, 0, -1.23: true, 2.2: "a"]   //属性不计入数组长度之中

/*稀疏数组，（有的值是空），length值大于实际定义的元素的个数 */
var a3 = [,,];
console.log(a3.length);//2，最后逗号之后的元素不算
console.log(["a","b"].length);//2
console.log(["a","b",].length);//2
console.log(["a","b",,].length);//3

var a1 = [,"abc"];
console.log(a1.length);//2
for(var i in a1){
    console.log(i,a1[i]);// 1 abc 遍历稀疏数组时，注意的跳过无元素项
}
console.log(0 in a1,1 in a1);//false true

var a=[][]; //不能这样直接定义二维数组
// 多维数组 (矩形数组和交错数组)
var table = new Array(5);
for(var i=0;i<table.length;i++){
    table[i] = new Array(5);
}
console.log(table);//(5) [Array(5), Array(5), Array(5), Array(5), Array(5)]    5*5数组

var table = new Array(5);
for(var i=0;i<table.length;i++){
    table[i] = new Array(i);
}
console.log(table);//(5) [Array(0), Array(1), Array(2), Array(3), Array(4)] 交错数组

var table = new Array(5);
for(var i=0;i<table.length;i++){
    table[i] = new Array(5);//若是table[i] = new Array(i);交错数组
}
for(var row=0;row<table.length;row++){
    for(var col=0;col<table[row].length;col++){
        table[row][col]=row*col;
    }
}
console.log(table);//矩形数组
// 合并一起的写法
var table = new Array(5);
for(var i=0;i<table.length;i++){
    table[i] = new Array(5);//若是table[i] = new Array(i);
    for(var col=0;col<table[i].length;col++){
        table[i][col]=i*col;
    }
}
console.log(table);

//数组方法参考链接：
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from
//数组静态方法  Array.from(...) 、Array.isArray(...) 、Array.of(...)
const bar = ["a", "b", "c"];   // Array.from(...)可以将类数组对象或可迭代对象转化成真正的数组，就是将传入的参数返回成数组
Array.from(bar);// ["a", "b", "c"]
Array.from('foo');// ["f", "o", "o"]
//Array.of(...)就是将传入的参数返回成数组，of（）参数类型以及固定长度不限制
Array.of(7);       // [7]
Array.of(1, 2, 3); // [1, 2, 3]
Array(7);          // [ , , , , , , ]
Array(1, 2, 3);    // [1, 2, 3]

var arr1 = [1,3,4];
console.log(Array.isArray(arr1));//true Array.isArray 判断是不是一个数组

function f(){
	console.log(arguments);//Arguments(4) [1, 2, 3, "x"]
	arguments.pop();  //报错，不是一个数组  argumentas instanceof Array  //false
	Array.prototype.pop.call(arguments); //强行绑定到Array.prototype  pop 方法在Array.prototype上
	console.log(arguments);//Arguments(4) [1, 2, 3]
}
f(1,2,3,'x');  //类数组对象

var a=[1,2,3];
var b=a.push(5,6);
console.log(a,b);//(5) [1, 2, 3, 5, 6]     5   push()返回的是新的长度
/*数组原型方法 Array.prototype.shift() Array.prototype.splice()  Array.prototype.sort() Array.prototype.pop()*/
//数组添加删除元素的原型方法 破坏性
// 排序和颠倒元素顺序 破坏性
var arr3 = [-1,-20,7,50];
arr3.sort();
console.log(arr3);//(4) [-1, -20, 50, 7]

//sort传递的函数对象
arr3.sort(function (a,b) {return a-b;});//对于数字类型，大于0则交换，冒泡排序
//arr3.sort(function (a,b) {return a>b;});//对于布尔类型，true则交换，冒泡排序

var arr2 = ["banana","apple","pear","orange"];
arr2.sort(function(a,b){return a[1]>b[1];});//按第二个字母排序
console.log(arr2);

//Part333333333 值的查找 非破坏性
//Array.prototype.indexOf(searchValue,startIndex?)
var arr8 = [1,3,5,5,7,9,5];
console.log(arr8.indexOf(5));//输出几？
console.log(arr8.indexOf(5,3));//寻找5， 从第三个下标开始找
console.log(arr8.indexOf(5,5));//输出几？

//Array.prototype.lastIndexOf(searchElement,startIndex?)
console.log(arr8.lastIndexOf(5));//输出几？
console.log(arr8.lastIndexOf(5,3));//找5，从后往前数第三个开始找
console.log(arr8.lastIndexOf(5,5));//输出几？

var arr1= [2,5,8];
arr1.forEach(function (a) {  //forEach遍历每一个元素
    if(a>3){
        console.log(a,"大于3");
    }else {
        console.log(a,"不大于3");
    }
});
console.log(arr1);
var arr2= [2,5,8];//[2,4,6]
var returnValue = arr2.every(function (a) {//判断数组元素是否都是偶数，若有不满足的将不再进行后续判断
    //every判断每一个元素是否满足条件，若不满足，不执行后面的判断，直接返回
    return a%2===0;
});
console.log(returnValue);
var arr2= [2,5,8];//[2,4,6]
var returnValue = arr2.some(function (a) {//判断数组元素是否都是偶数，若有不满足的将不再进行后续判断
    //some判断每一个元素是否满足条件，若满足，不执行后面的判断，直接返回
    return a%2===0;
});
console.log(returnValue);
var arr2= [1,3,5,7,9];
var newArray = arr2.map(function (a) {
    return a*a; //返回新的数组中每个数都是原数组的平方
});
console.log(newArray,arr2);
var arr2= [1,3,5,7,9];
var newArray = arr2.filter(function (a) {//filter过滤 产生新数组，新数组的元素是返回为true的那些元素
    return (a>2&&a<8)?true:false;
});
console.log(newArray,arr2);
